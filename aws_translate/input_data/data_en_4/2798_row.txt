The difficulty in achieving a system that provides availability, consistency, and partition tolerance simultaneously lies in the inherent trade-offs between these properties, as stated by the CAP theorem. The CAP theorem was proposed by Eric Brewer in 2000 and later proven by Seth Gilbert and Nancy Lynch from MIT in 2002. To better understand this difficulty, let's define each of the CAP properties:

1. Consistency: Every node in a distributed system sees the same data at the same time. This means that after a write operation, all subsequent read operations should return the updated value, ensuring that all operations follow a linear order.

2. Availability: Every request to the system receives a response, indicating either success or failure. In simpler words, the system should always be operational and responsive to requests regardless of any failures encountered.

3. Partition tolerance: The system continues to function even if the network is divided into two or more isolated partitions due to communication failures or network issues.

The CAP theorem states that a distributed system can meet at most two of these three requirements simultaneously. The reason for this difficulty is the underlying trade-offs necessary to ensure each property which often conflict with one another. Let's analyze these trade-offs:

1. Consistency vs Availability: In a distributed system, when a client writes a piece of data, this data must be propagated across all nodes in the system to guarantee consistency. However, this propagation takes time and will often require acknowledgment from each node to ensure data stability. During this time, if any part of the system becomes unavailable due to a network failure or node crash, the system can't guarantee complete and up-to-date data to all clients, leading to inconsistency.

2. Consistency vs Partition tolerance: To maintain consistency across all nodes, the system must enforce strict control over data flow and updates. However, in the presence of network partitions, ensuring that all nodes have the same data can be challenging. If the system prioritizes consistency, it might have to sacrifice availability by blocking some operations or allowing only partial functionality, which can be detrimental during a partition.

3. Availability vs Partition tolerance: If a system aims for high availability, it must continue to operate under network partition conditions. If a partition occurs, the system has two options: either block operations until the partition is resolved (harming availability) or continue to operate independently in both partitions, which may result in inconsistent data once the partition is resolved.

Due to these trade-offs, it is difficult to create a system that guarantees availability, consistency, and partition tolerance simultaneously. As a result, modern distributed systems and databases often choose to adopt an "eventual consistency" model, which prioritizes availability and partition tolerance and works to provide a flexible degree of data consistency. This approach enables systems to be more resilient in the face of network failures and scale effectively across a large number of nodes. However, it comes at the cost of relinquishing the guarantee of immediate consistency.