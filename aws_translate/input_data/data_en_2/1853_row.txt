Question 1: What are the steps to be taken to become a good TopCoder?

To become a good TopCoder, individuals should follow a systematic approach that involves learning, practice, and consistent growth in their programming skills. Here are several steps to be taken:

1. Master the foundational skills: Begin by understanding basic programming concepts and learning a programming language like C++, Java, or Python. Gain a strong foundation in data structures (arrays, linked lists, stacks, queues) and algorithms (searching, sorting, recursion, dynamic programming).

2. Familiarize yourself with TopCoder: Create an account on TopCoder and explore the site to understand its resources, competition formats, and rules. Start participating in Single Round Matches (SRMs) and practice those problems that cater to your current skill level. Gradually move to more complex problems.

3. Learn advanced concepts: As you progress, learn more advanced data structures (binary trees, heaps, graphs) and algorithms (greedy algorithms, divide and conquer, backtracking, memoization). Delve deeper into programming paradigms like object-oriented, functional, and multithreaded programming.

4. Practice, practice, practice: The more problems you solve, the better you'll become. Start with the TopCoder archives to find problems from previous competitions and solve as many as possible. Look for high-quality educational resources, such as competitive programming courses, websites, books, and online tutorials to further enhance your skills.

5. Participate in contests: Regularly take part in TopCoder contests and competitions like SRMs and Marathon Matches to test your skills and gain exposure to the variety of problems that you'll encounter on the platform. The more experience you gather, the better your chances of improving your ranking and skill level.

6. Collaboration and Networking: Engage with the TopCoder community and join forums or chat rooms to interact with other programmers. Discuss problem-solving strategies, share your experiences, and learn from others' approaches. Networking with fellow competitive programmers can broaden your perspectives.

7. Keep track of your performance: Monitor your progress and analyze your performance after each competition. Identify areas where you struggle and work on them. Set realistic goals and be persistent in your efforts to improve.

8. Learn time management: In competitive programming, solving problems quickly is crucial. Develop effective time management skills and learn how to optimize and prioritize your code execution accordingly.

Question 2: Where does TopCoder Petr work?

Petr Mitrichev is a renowned competitive programmer and TopCoder competitor. He currently works at Google as a Software Engineer. Petr has worked for various tech companies, including Google and Facebook, in the past, and he's widely respected for his performance in programming contests and his expertise in algorithms.

As for the last question, questions 1 and 2 are not asking the same thing. Question 1 is about the steps to be taken to become a good TopCoder competitor, while question 2 is about the workplace of the popular TopCoder competitor, Petr Mitrichev.